#ifdef SWIGR
%module rsdg
#endif

#ifdef SWIGPYTHON
    %module pysdg
#endif

#pragma SWIG nowarn=503,509,325,362,401

%{
/* Includes the header in the wrapper code */
#include <cstdint>
#include <sstream>

#include "sdglib/workspace/WorkSpace.hpp"

#include "sdglib/types/KmerTypes.hpp"
#include "sdglib/types/GenericTypes.hpp"
#include "sdglib/types/MappingTypes.hpp"

#include "sdglib/graph/SequenceDistanceGraphPath.hpp"
#include "sdglib/graph/SequenceSubGraph.hpp"
#include "sdglib/graph/SequenceDistanceGraph.hpp"
#include "sdglib/graph/DistanceGraph.hpp"

#include "sdglib/views/NodeView.hpp"
#include "sdglib/mappers/SequenceMapper.hpp"


#include "sdglib/factories/KMerFactory.hpp"
#include "sdglib/factories/KMerIDXFactory.hpp"

#include "sdglib/mappers/LinkedReadsMapper.hpp"
#include "sdglib/mappers/LongReadsMapper.hpp"
#include "sdglib/mappers/PairedReadsMapper.hpp"

#include "sdglib/datastores/PairedReadsDatastore.hpp"
#include "sdglib/datastores/LinkedReadsDatastore.hpp"
#include "sdglib/datastores/LongReadsDatastore.hpp"
#include "sdglib/datastores/ReadSequenceBuffer.hpp"
#include "sdglib/datastores/KmerCounter.hpp"

#include "sdglib/indexers/UniqueKmerIndex.hpp"

#include "sdglib/processors/LinkageMaker.hpp"
#include "sdglib/processors/LinkageUntangler.hpp"
#include "sdglib/processors/HaplotypeConsensus.hpp"

#include "sdglib/readers/FileReader.hpp"

%}

%include "stl.i"
%include "std_common.i"
%include "std_container.i"
%include "stdint.i"
%include "std_set.i"
%include "std_unordered_set.i"
%include "std_string.i"
%include "exception.i"

%exception {
  try {
    $action
  } catch (const std::runtime_error& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  } catch (const std::logic_error& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  } catch (const std::invalid_argument& e) {
    SWIG_exception(SWIG_ValueError, e.what());
  }
}

%feature("director") DistanceGraph;
%feature("director") SequenceDistanceGraph;

%template(vectorInt) std::vector<int>;
%template(vectorDouble) std::vector<double>;
%template(vectorFloat) std::vector<float>;
%template(vectorString) std::vector<std::string>;
%template(ConstCharVector) std::vector<const char*>;
%template(vectorUINT16) std::vector<uint16_t >;
%template(vectorUINT64) std::vector<uint64_t>;
%template(vectorVectorUINT16) std::vector< std::vector <uint16_t > >;
%template(vectorVectorUINT64) std::vector< std::vector <uint64_t > >;
%template(vectorBool) std::vector<bool>;
%template(usetUINT64) std::unordered_set<uint64_t>;
%template(usetUINT128) std::unordered_set<__uint128_t, int128_hash>;

%template(vectorSGNode) std::vector<int64_t>;
%template(vectorvectorSGNode) std::vector<std::vector<int64_t>>;
%template(SGNodePair) std::pair<int64_t, int64_t>;
%template(vectorSGNodePair) std::vector<std::pair<int64_t, int64_t>>;
%template(setSGNodePair) std::set<std::pair<int64_t, int64_t>>;
%template(setSGNode) std::set<int64_t>;


%define __STR__()
std::string __str__() {
  std::ostringstream out;
  out << *$self;
  return out.str().c_str();
}
%enddef

%define __REPR__()
std::string __repr__() {
  std::ostringstream out;
  out << "<" << *$self << ">";
  return out.str().c_str();
}
%enddef

%extend Link{
    __STR__();
    __REPR__();
}

%extend Node{
    __STR__();
    __REPR__();
}

%extend NodeView{
    __STR__();
    __REPR__();
};

%extend LinkView{
    __STR__();
    __REPR__();
};

%extend LongReadMapping{
    __STR__();
    __REPR__();
};

%extend KmerIDX{
    __STR__();
    __REPR__();
};

%extend DistanceGraph{
    __STR__();
    __REPR__();
};

%extend SequenceDistanceGraph{
    __STR__();
    __REPR__();
};

%extend WorkSpace{
    __STR__();
    __REPR__();
};

%extend PairedReadsDatastore{
    __STR__();
    __REPR__();
};

%extend LinkedReadsDatastore{
    __STR__();
    __REPR__();
};

%extend LongReadsDatastore{
    __STR__();
    __REPR__();
};

%extend KmerCounter{
    __STR__();
    __REPR__();
};

%extend PairedReadsMapper{
    __STR__();
    __REPR__();
};

%extend LinkedReadsMapper{
    __STR__();
    __REPR__();
};

%extend LongReadsMapper{
    __STR__();
    __REPR__();
};


%pythoncode %{
__version__ = "@sdg_VERSION@"
__branch__ = "@GIT_BRANCH@"
__commit__ = "@GIT_COMMIT_HASH@"
%}


%include "sdglib/types/KmerTypes.hpp"
%include "sdglib/types/GenericTypes.hpp"
%include "sdglib/readers/FileReader.hpp"

%include "sdglib/workspace/WorkSpace.hpp"

%include "sdglib/factories/KMerFactory.hpp"

%include "sdglib/types/MappingTypes.hpp"

%include "sdglib/graph/SequenceDistanceGraphPath.hpp"
%include "sdglib/graph/SequenceSubGraph.hpp"
%include "sdglib/graph/SequenceDistanceGraph.hpp"
%include "sdglib/graph/DistanceGraph.hpp"

%include "sdglib/views/NodeView.hpp"
%include "sdglib/mappers/SequenceMapper.hpp"

%include "sdglib/indexers/UniqueKmerIndex.hpp"

%include "sdglib/datastores/PairedReadsDatastore.hpp"
%include "sdglib/datastores/LinkedReadsDatastore.hpp"
%include "sdglib/datastores/LongReadsDatastore.hpp"
%include "sdglib/datastores/KmerCounter.hpp"
%include "sdglib/datastores/ReadSequenceBuffer.hpp"

%include "sdglib/mappers/LongReadsMapper.hpp"
%include "sdglib/mappers/LinkedReadsMapper.hpp"
%include "sdglib/mappers/PairedReadsMapper.hpp"

%include "sdglib/processors/LinkageMaker.hpp"
%include "sdglib/processors/LinkageUntangler.hpp"
%include "sdglib/processors/HaplotypeConsensus.hpp"

%template(vectorLink) std::vector<Link>;
%template(vectorvectorLink) std::vector<std::vector<Link>>;

%template(vectorNode) std::vector<Node>;

%ignore std::vector<SequenceDistanceGraphPath>::vector(size_type);
%ignore std::vector<SequenceDistanceGraphPath>::resize;
%template(vectorSequenceDistanceGraphPath) std::vector<SequenceDistanceGraphPath>;
%extend std::vector<SequenceDistanceGraphPath> {
    const std::string __repr__() {
        std::string s="<Vector: " + std::to_string(self->size())+" SequenceDistanceGraphPaths>";
        return s;
    }
    const std::string __str__() {
        if (self->empty()) return "[]";
        std::ostringstream oss;
        oss<<"["<<std::endl;
        for (const auto &n:*self) oss<<"<"<<n<<">,"<<std::endl;
        oss.seekp(-2,oss.cur);
        oss<<std::endl<<"]";
        return oss.str();
    }
}
%ignore std::vector<NodeView>::vector(size_type);
%ignore std::vector<NodeView>::resize;
%template(vectorNodeView) std::vector<NodeView>;
%extend std::vector<NodeView>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" NodeViews>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &n:*self) oss<<"<"<<n<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}
%ignore std::vector<LinkView>::vector(size_type);
%ignore std::vector<LinkView>::resize;
%template(vectorLinkView) std::vector<LinkView>;
%extend std::vector<LinkView>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" LinkViews>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}
%template(vectorReadPosSize) std::vector< ReadPosSize >;
%template(vectorReadMapping) std::vector<ReadMapping>;
%extend std::vector<ReadMapping>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" ReadMappings>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}
%template(vectorvectorReadMapping) std::vector<std::vector<ReadMapping>>;
%template(vectorLongReadMapping) std::vector<LongReadMapping>;
%extend std::vector<LongReadMapping>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" LongReadMappings>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%template(vectorvectorLongReadMapping) std::vector<std::vector<LongReadMapping>>;
%template(vectorTagNeighbour) std::vector<TagNeighbour>;
%template(vectorvectorTagNeighbour) std::vector<std::vector<TagNeighbour>>;
%template(vectorHaplotypeScore) std::vector<HaplotypeScore>;

%ignore std::vector<PairedReadsDatastore>::vector(size_type);
%ignore std::vector<PairedReadsDatastore>::resize;
%template(vectorPairedReadsDatastore) std::vector<PairedReadsDatastore>;
%extend std::vector<PairedReadsDatastore>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" PairedReadsDatastores>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%ignore std::vector<LinkedReadsDatastore>::vector(size_type);
%ignore std::vector<LinkedReadsDatastore>::resize;
%template(vectorLinkedReadsDatastore) std::vector<LinkedReadsDatastore>;
%extend std::vector<LinkedReadsDatastore>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" LinkedReadsDatastores>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%ignore std::vector<LongReadsDatastore>::vector(size_type);
%ignore std::vector<LongReadsDatastore>::resize;
%template(vectorLongReadsDatastore) std::vector<LongReadsDatastore>;
%extend std::vector<LongReadsDatastore>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" LongReadsDatastores>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%ignore std::vector<KmerCounter>::vector(size_type);
%ignore std::vector<KmerCounter>::resize;
%template(vectorKmerCountsDatastore) std::vector<KmerCounter>;
%extend std::vector<KmerCounter>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" KmerCounters>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%template(vectorKmerCount) std::vector<KmerCount>;
%extend std::vector<KmerCount>{
        const std::string __repr__() {
            std::string s="<Vector: "+std::to_string(self->size())+" KmerCounts>";
            return s;
        }
        const std::string __str__() {
            if (self->empty()) return "[]";
            std::ostringstream oss;
            oss<<"["<<std::endl;
            for (const auto &l:*self) oss<<"<"<<l<<">,"<<std::endl;
            oss.seekp(-2,oss.cur);
            oss<<std::endl<<"]";
            return oss.str();
        }
}

%template(set10xTag) std::set<LinkedTag>;

%template(fastaReader) FastaReader<FastaRecord>;

%extend SequenceDistanceGraphPath{
        const std::string __repr__() {
            std::string s="<SequenceDistanceGraphPath: "+std::to_string(self->nodes.size())+" Nodes on "+self->sg.name+">";
            return s;
        }
        const std::string __str__() {
            if (self->nodes.empty()) return "[]";
            std::ostringstream oss;
            oss<<"[";
            for (const auto &l:self->nodes) oss<<" "<<l<<",";
            oss.seekp(-1,oss.cur);
            oss<<" ]";
            return oss.str();
        }
}